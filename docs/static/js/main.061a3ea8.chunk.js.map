{"version":3,"sources":["Game.js","App.js","serviceWorker.js","index.js"],"names":["Sudoku","window","sudoku","difficulties","SudokuGame","_this","this","difficulty","arguments","length","undefined","_data","Object","classCallCheck","getOwnPropertyNames","forEach","key","initialBoard","board","generate","solve","Array","from","map","value","index","hint","row","Math","floor","column","mergeObj","assign","toHash","_this2","obj","getCells","nextValue","nextBoard","substring","clone","Game","props","_this3","possibleConstructorReturn","getPrototypeOf","call","onKeyDown","event","setState","cursor","state","updateCell","clearCursor","newGame","cell","_this4","gameRows","cells","rows","i","push","slice","cellsToRows","react_default","a","createElement","className","tabIndex","onBlur","cellProps","data-selected","onClick","updateCursor","data-hint","isSolved","React","Component","App","src_Game_0","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.061a3ea8.chunk.js","sourcesContent":["import React from 'react';\nimport './Game.css';\n\nconst Sudoku = window.sudoku;\n\nconst difficulties = [\n  'easy',\n  'medium',\n  'hard',\n  'very-hard',\n  'insane',\n  'inhuman'\n]\n\nclass SudokuGame {\n  constructor(difficulty = difficulties[1], _data) {\n    if (_data) {\n      Object.getOwnPropertyNames(_data).forEach((key) => {\n        this[key] = _data[key]\n      });\n    } else {\n      this.difficulty = difficulty;\n      this.initialBoard = this.board = Sudoku.generate(difficulty);\n    }\n  }\n\n  solve(board) {\n    return Sudoku.solve(board || this.initialBoard);\n  }\n\n  isSolved() {\n    return this.solve(this.board) === this.board;\n  }\n\n  hasError() {\n    return !this.solve(this.board);\n  }\n\n  getCells() {\n    const initialBoard = Array.from(this.initialBoard);\n    return Array.from(this.board).map((value, index) => {\n      return {\n        hint: initialBoard[index] !== '.',\n        value: value === '.' ? '' : value,\n        row: Math.floor(index / 9.0),\n        column: index % 9,\n        index: index\n      };\n    });\n  }\n\n  clone(mergeObj) {\n    const data = Object.assign({}, this.toHash(), mergeObj);\n    return new SudokuGame(null, data);\n  }\n\n  toHash() {\n    const obj = {};\n    Object.getOwnPropertyNames(this).forEach(key => {\n      obj[key] = this[key];\n    });\n    return obj;\n  }\n\n  updateCell(index, value) {\n    const selectedCell = this.getCells()[index];\n    if (selectedCell.hint) {\n      // invalid move\n      return this;\n    }\n    const nextValue = value === '' ? '.'  : value;\n    const nextBoard = this.board.substring(0, index) + nextValue + this.board.substring(index + 1);\n    return this.clone({ board: nextBoard });\n  }\n}\n\nfunction cellsToRows(cells) {\n  const rows = [];\n  for (let i = 0; i < 9; i++) {\n    rows.push(cells.slice(i * 9, (i + 1) * 9));\n  }\n  return rows;\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sudoku: new SudokuGame(),\n      cursor: null\n    }\n  }\n\n  onKeyDown = (event) => {\n    switch(event.key) {\n      case 'ArrowUp': {\n        this.setState({ cursor: (81 + this.state.cursor - 9) % 81 });\n        break;\n      }\n      case 'ArrowDown': {\n        this.setState({ cursor: (81 + this.state.cursor + 9) % 81 });\n        break;\n      }\n      case 'ArrowLeft': {\n        this.setState({ cursor: (81 + this.state.cursor - 1) % 81 });\n        break;\n      }\n      case 'ArrowRight': {\n        this.setState({ cursor: (81 + this.state.cursor + 1) % 81 });\n        break;\n      }\n      case 'Backspace':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9': {\n        const value = event.key === 'Backspace' ? '' : event.key;\n        this.setState({ sudoku: this.state.sudoku.updateCell(this.state.cursor, value) })\n        break;\n      }\n      default: {\n        break;\n      }\n    }\n  }\n\n  updateCursor(cell) {\n    this.setState({\n      cursor: cell.index\n    });\n  }\n\n  clearCursor = () => {\n    this.setState({\n      cursor: null\n    });\n  }\n\n  solve = () => {\n    this.setState({ sudoku: this.state.sudoku.clone({ board: this.state.sudoku.solve() }) })\n  }\n\n  newGame = () => {\n    this.setState({\n      sudoku: new SudokuGame(),\n      cursor: null\n    });\n  }\n\n  render() {\n    const gameRows = cellsToRows(this.state.sudoku.getCells());\n    return (\n      <div>\n        <div className=\"Game\" tabIndex=\"0\" onKeyDown={this.onKeyDown} onBlur={this.clearCursor}>\n          <table className=\"Game__Table\">\n            <tbody>\n              { \n                gameRows.map((row, index) => {\n                  return (\n                    <tr key={index} className=\"Game__TableRow\">\n                      { \n                        row.map((cell) => {\n                          const cellProps = {\n                            'data-selected': this.state.cursor === cell.index, \n                            onClick: () => this.updateCursor(cell)\n                          };\n\n                          return (\n                            <td className=\"Game__Cell\" key={cell.index} data-hint={cell.hint} {...cellProps}>\n                              {cell.value}\n                            </td>\n                          );\n                        })\n                      }\n                    </tr>\n                  );\n                })\n              }\n            </tbody>\n          </table>\n        </div>\n        <div>\n          { this.state.sudoku.isSolved() &&\n            <h2>Complete!</h2>\n          }\n          <button onClick={this.solve}>Solve</button>\n          <button onClick={this.newGame}>New Game</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport './App.css';\nimport Game from './Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}